# -*- coding: utf-8 -*-
"""JSON THL .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1itT2f1OHGwIej6lToSkCZ7J63KajWcTu

**FIT23**

by Alexander Winberg, 2023

load_data är tagen från Sabina Bäcks et al.s projekt.

Denna version fungerar **inte** i Pythons IDLE utan modifikationer. Den fungerar i Anaconda, PyCharm och Google Colab, andra plaformer är otestade.

Vi importerar följande bibliotek.

Json, eftersom vi bearbetar en fil i json format.

Urllib, ger oss möjligheten att ladda ned filer från nätet och spara dem i en variabel.

Matplotlib, ger oss möjligheten att visualisera.

Numpy stöder matploplib.
"""

import json
import urllib.request
import matplotlib.pyplot as plt
import numpy as np

"""Funktionen load_data tar den utvalda filen och sparar den som en json fil (detsamma som dictionary för vårt behov).
Om man vill använda annat material från THL är det fullt möjligt. Man måste bara söka upp den rätta url till just den json filen.

THL:s öppna data hittar ni här, 

https://thl.fi/sv/web/thlfi-sv/statistik-och-data/material-och-tjanster/oppna-data. 

Gå sedan till programmeringsgränssnitt för den data ni är intresserad av och klicka på knappen. I fönstret som öppnas hittar ni länken till json filen.

Använd till exempel den här sidan om du behöver se hur json filen är uppbyggd. 

https://jsonformatter.curiousconcept.com
    
Eftersom vi arbetar med nestled dictionaries (json) måste vi veta vilken data vi är ute efter. I filen ser vi att dataset innehåller value som innehåller diverse nycklar som är numrerade. 

Programmet undersöker dels antalet besök hos THL:s tjänster i Egentliga Finland och dels antalet smittofall av Covid19 i Egentliga Finland.

Vi kan nu konstatera att en del av det data vi vill komma åt finns i nycklarna 220 till 228, hur många besök som har gjorts till hälsotjänster per år i Egentliga Finland. 

Det är viktigt att vi studerar hur data är uppbyggd så att vi vet hur vi kan hitta den korrekta delen. I den primitiva funktionen ser ni hur filen jag använder är uppbyggd, samma gäller för alla json filer.
"""

def main():

    primitive()

    slightly_better()

# primitive function to do shit

def primitive():

  # use load_data to gain a json file

  medical_data = load_data("kaynnit_alueittain.json", "https://sampo.thl.fi/pivot/prod/fi/avo/perus01/fact_ahil_perus01.json")


  # All values are initialie in str format so we need to change them into ints.

  visit_2015_EF = int(medical_data['dataset']['value']['220'])
  visit_2016_EF = int(medical_data['dataset']['value']['221'])
  visit_2017_EF = int(medical_data['dataset']['value']['222'])
  visit_2018_EF = int(medical_data['dataset']['value']['223'])
  visit_2019_EF = int(medical_data['dataset']['value']['224'])
  visit_2020_EF = int(medical_data['dataset']['value']['225'])
  visit_2021_EF = int(medical_data['dataset']['value']['226'])
  visit_2022_EF = int(medical_data['dataset']['value']['227'])
  visit_2023_EF = int(medical_data['dataset']['value']['228'])

  # Covid data

  cor_2015_EF = 0
  cor_2016_EF = 0
  cor_2017_EF = 0
  cor_2018_EF = 0
  cor_2019_EF = 0

  cor_2020_EF = int(cov_loop("214","262"))
  cor_2021_EF = int(cov_loop("263","314"))
  cor_2022_EF = int(cov_loop("315","366"))
  cor_2023_EF = int(cov_loop("367","377"))

  #Plotting

  ypoints = np.array(['2015','2016','2017','2018','2019', '2020', '2021', '2022', '2023'])
  xpoints = np.array([visit_2015_EF, visit_2016_EF, visit_2017_EF, visit_2018_EF, visit_2019_EF, visit_2020_EF, visit_2021_EF, visit_2022_EF, visit_2023_EF])
  covpoints = np.array([cor_2015_EF, cor_2016_EF, cor_2017_EF, cor_2018_EF, cor_2019_EF, cor_2020_EF, cor_2021_EF, cor_2022_EF, cor_2023_EF])
    
  plt.grid(True)

  plt.plot(ypoints,xpoints, 'o:r')
  plt.plot(ypoints, covpoints, 'o:g')
  plt.title("Besök hos THLs tjänster jämfört med insjuknade i Covid-19")
  plt.xlabel("År")
  plt.ylabel("Besökar antal i miljoner")
  
  print("Primitiv lösning")
  plt.show()

# We need a function to go through a year's worth of covid data and add it all together
# The sum can then be used to compare the result with the use of THL services
# The function should be reusable so that every year can call upon it.

def cov_loop(year_start, year_end):

  covid_data = load_data("covid_egent_fin.json", "https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.json")
  
  counter = start_temp = int(year_start)
  
  end_temp = int(year_end)+1
  sum_temp = 0



  for (k,v) in covid_data.items():
  
    while counter < end_temp: 
      sum_temp += int(v['value'][year_start])

      int_temp = int(year_start)
      int_temp += 1
      year_start = str(int_temp)
      counter +=1

   
    return sum_temp

# Slightly better way of doing it


def slightly_better():
  
  medical_data = load_data("kaynnit_alueittain.json", "https://sampo.thl.fi/pivot/prod/fi/avo/perus01/fact_ahil_perus01.json")
  
  # call upon the required years
  list_years = years()

  #starting value
  nr_temp = str(220)

  #ending value
  end = str(229)

  patient_list = []
  covid_list = [0,0,0,0,0, int(cov_loop("214","262")),int(cov_loop("263","314")),int(cov_loop("315","366")), int(cov_loop("367","377")) ]
  

  
  
  # loop through the data
  for (k,v) in medical_data.items():
  
    while nr_temp != end: 
      temp = int(v['value'][nr_temp])
      
      patient_list.append(temp)
      
      int_temp = int(nr_temp)
      int_temp += 1
      nr_temp = str(int_temp)




  # Plotting

  xpoints = np.array(list_years)
  ypoints = np.array(patient_list)
  zpoints = np.array(covid_list)

  plt.grid(True)
  plt.plot(xpoints, ypoints, zpoints, 'o:g')
  
  plt.title("Besök hos THLs tjänster jämfört med insjuknade i Covid-19")
  plt.xlabel("År")
  plt.ylabel("Besökar antal i miljoner")
  print("Slightly better lösning")
  plt.show()

# A needlessly complicated way of parsing through years and storing them as strings.

def years():

  current_year = start_year = 2015

  end_year = 2023

  list_of_years = []
  
  while current_year <= end_year:
    list_of_years.append(str(current_year))
    current_year +=1
    

  return list_of_years

def load_data(file, url):  # load the  json file.

    with urllib.request.urlopen(url) as url:
        data = json.loads(url.read().decode())
        json_object = json.dumps(data, indent=4)

        with open(file, 'w') as filetowrite:
            filetowrite.write(json_object)

    with open(file, 'r', encoding="utf-8") as f:
        data = json.load(f)

    return data

# you know what this does

if __name__ == "__main__":
    main()

"""Skriv slutligen en rapport där ni analyserar de resultat ni har. Meningen är ju att ni använder annan data än den som finns presenterad här och att ni anpassar programmet enligt era behov, tex genom att lägga till mera data att analyseras.

I rapporten skall ni kunna att förklara varför ni har valt just den data ni valt, om så bara för att ni tycker det är intressant. Ta upp vad det finns för kopplingar mellan data, påverkar den ena den andra?
Vilka resultat får ni och hur kan ni tolka dem? Är sambandet stort eller visade det sig att det inte fanns någon större koppling? I mitt exempel ser vi att besöken ökade markant, trots att antalet smittade ändå inte var stort, då kan man fundera på vad det beror på och till exempel också analysera hur många tester som gjorts för att se om det kan vara en faktor man borde beakta.
"""